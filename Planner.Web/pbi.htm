<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <script type="text/javascript" src="Scripts/knockout-2.0.0.js"></script>
    <title>Product Backlog Items</title>
</head>
<body>
    <div role="application">
            <table>
                <thead>
                    <tr>
                        <th>PBI ID</th>
                        <th>BDO IssueId</th>
                        <th>PBI name</th>
                        <th>Amount Tasks</th>
                        <th>Amount Bugs</th>
                        <th>Amount Changes</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan="11">Total Hours Remaining</td>
                        <td aria-live="polite" data-bind="text: remaininghours()"></td>
                    </tr>
                </tfoot>
                <tbody>
                    <tr aria-live="polite">
                        <td data-bind="text: pbi_id"></td>
                        <td data-bind="text: issueid"></td>
                        <td data-bind="text: pbiname"></td>
                        <td data-bind="text: amountTasks"></td>
                        <td data-bind="text: amountBugs"></td>
                        <td data-bind="text: amountChanges"></td>
                    </tr>
                </tbody>
            </table>

            <table>
                <thead>
                    <tr>
                        <th>Task ID</th>
                        <th>Task name</th>
                        <th>Hours Remaining</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan="11">Total Hours Remaining</td>
                        <td aria-live="polite" data-bind="text: remainingtaskhours()"></td>
                    </tr>
                </tfoot>
                <!-- render tbody for each bug under pbi-->
                <tbody data-bind="foreach: pbitasks">
                    <tr aria-live="polite">
                        <td data-bind="text: taskid"></td>
                        <td data-bind="text: taskname"></td>
                        <td data-bind="text: remaininghours"></td>
                    </tr>
                </tbody>
            </table>

            <table>
                <thead>
                    <tr>
                        <th>Bug ID</th>
                        <th>Bug name</th>
                        <th>Amount Tasks</th>
                        <th>Task Hours Remaining</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan="11">Total Hours Remaining</td>
                        <td aria-live="polite" data-bind="text: remainingbughours()"></td>
                    </tr>
                </tfoot>
                <!-- render tbody for each bug under pbi-->
                <tbody data-bind="foreach: pbibugs">
                    <tr aria-live="polite">
                        <td data-bind="text: bugid"></td>
                        <td data-bind="text: bugname"></td>
                        <td data-bind="text: amountTasks"></td>
                        <td data-bind="text: remaininghoursforbug()"></td>
                    </tr>
                </tbody>
            </table>

            <table>
                <thead>
                    <tr>
                        <th>Change ID</th>
                        <th>Change name</th>
                        <th>Amount Tasks</th>
                        <th>Task Hours Remaining</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan="11">Total Hours Remaining</td>
                        <td aria-live="polite" data-bind="text: remainingchangehours()"></td>
                    </tr>
                </tfoot>
                <!-- render tbody for each bug under pbi-->
                <tbody data-bind="foreach: pbichanges">
                    <tr aria-live="polite">
                        <td data-bind="text: changeid"></td>
                        <td data-bind="text: changename"></td>
                        <td data-bind="text: amountTasks"></td>
                        <td data-bind="text: remaininghoursforchange()"></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <script type="text/javascript">
            // function is object ctor in javascript
            var PBI = function (id, issueId, name, tasks, bugs, changes) {
                this.pbi_id = id;
                this.issueid = issueId;
                this.pbiname = name;
                //this.pbitasks = tasks;
                //this.pbichanges = changes;

                // observableArray makes adding and removing visible to all subscribers
                this.pbibugs = ko.observableArray();
                // bugs is provided externally, it can contain other items than Bug items so their properties are extracted here for creation of Bug array
                for (var i in bugs) {
                    var bug = new Bug(bugs[i].bugid, bugs[i].bugname, bugs[i].bugtasks);
                    console.log(bug.bugname);
                    this.pbibugs.push(bug);
                }

                this.pbichanges = ko.observableArray();
                for (var i in changes) {
                    var change = new Change(changes[i].changeid, changes[i].changename, changes[i].changetasks);
                    console.log(change.changename);
                    this.pbichanges.push(change);
                }

                this.pbitasks = ko.observableArray();
                for (var i in tasks) {
                    var task = new Task(tasks[i].taskid, tasks[i].taskname, tasks[i].taskactivity, tasks[i].remaininghours, tasks[i].completedhours, tasks[i].originalestimate);
                    console.log(task.taskactivity + " -> " + task.taskname);
                    this.pbitasks.push(task);
                }

                this.amountTasks = this.pbitasks().length;
                this.amountChanges = this.pbichanges().length;
                this.amountBugs = this.pbibugs().length;

                this.remainingbughours = function () {
                    var total = 0;
                    for (itm in this.pbibugs()) {
                        total += this.pbibugs()[itm].remaininghoursforbug();
                    }
                    return total;
                }
                this.remainingchangehours = function () {
                    var total = 0;
                    for (itm in this.pbichanges()) {
                        total += this.pbichanges()[itm].remaininghoursforchange();
                    }
                    return total;
                }
                this.remainingtaskhours = function () {
                    var total = 0;
                    for (itm in this.pbitasks()) {
                        total += this.pbitasks()[itm].remaininghours;
                    }
                    return total;
                }

                this.remaininghours = function () {
                    return this.remainingbughours() + this.remainingtaskhours() + this.remainingchangehours();
                }
            }

            var Task = function (id, name, activity, remainingHours, completedHours, originalEstimate) {
                this.taskid = id;
                this.taskname = name;
                this.taskactivity = activity;
                this.remaininghours = remainingHours;
                this.completedhours = completedHours;
                this.originalestimate = originalEstimate;
            }

            var Bug = function (id, name, tasks) {
                this.bugid = id;
                this.bugname = name;
                // observableArray makes adding and removing visible to all subscribers
                this.bugtasks = ko.observableArray();
                // bugs is provided externally, it can contain other items than Bug items so their properties are extracted here for creation of Bug array
                for (var i in tasks) {
                    var task = new Task(tasks[i].taskid, tasks[i].taskname, tasks[i].taskactivity, tasks[i].remaininghours, tasks[i].completedhours, tasks[i].originalestimate);
                    console.log(task.taskactivity + " -> " + task.taskname);
                    this.bugtasks.push(task);
                }

                this.remaininghoursforbug = function () {
                    var total = 0;
                    for (itm in this.bugtasks()) {
                        total += this.bugtasks()[itm].remaininghours;
                    }
                    return total;
                }

                this.amountTasks = this.bugtasks().length;
            }

            var Change = function (id, name, tasks) {
                this.changeid = id;
                this.changename = name;
                this.changetasks = ko.observableArray();
                
                for (var i in tasks) {
                    var task = new Task(tasks[i].taskid, tasks[i].taskname, tasks[i].taskactivity, tasks[i].remaininghours, tasks[i].completedhours, tasks[i].originalestimate);
                    console.log(task.taskactivity + " -> " + task.taskname);
                    this.changetasks.push(task);
                }

                this.remaininghoursforchange = function () {
                    var total = 0;
                    for (itm in this.changetasks()) {
                        total += this.changetasks()[itm].remaininghours;
                    }
                    return total;
                }

                this.amountTasks = this.changetasks().length;
            }

            // data loaded by AJAX or serverside code
            var digfactTasks =
            [
                { taskid: 1, taskname: "ontwikkelen", taskactivity: "Development", remaininghours: 2, completedhours: 3, originalestimate: 3 },
                { taskid: 2, taskname: "testen", taskactivity: "Testing", remaininghours: 4, completedhours: 0, originalestimate: 4 }
            ];

            var digfactMailBugTasks =
            [
                { taskid: 5, taskname: "fixen mail bug", taskactivity: "Development", remaininghours: 2, completedhours: 0, originalestimate: 3 },
                { taskid: 6, taskname: "testen mail bug", taskactivity: "Testing", remaininghours: 2, completedhours: 0, originalestimate: 2 }
            ];

            var digfactFactuurBugTasks =
            [
                { taskid: 7, taskname: "fixen factuur bug", taskactivity: "Development", remaininghours: 2, completedhours: 0, originalestimate: 3 },
                { taskid: 8, taskname: "testen factuur bug", taskactivity: "Testing", remaininghours: 4, completedhours: 1, originalestimate: 6 }
            ];

            var digfactChangeTasks =
            [
                { taskid: 10, taskname: "toevoegen pdf document", taskactivity: "Development", remaininghours: 16, completedhours: 0, originalestimate: 16 },
                { taskid: 11, taskname: "testen pdf doc", taskactivity: "Testing", remaininghours: 4, completedhours: 0, originalestimate: 4 }
            ];

            var digfactBugs =
            [
                { bugid: 3, bugname: "fout in mail", bugtasks: digfactMailBugTasks  },
                { bugid: 4, bugname: "fout in factuur", bugtasks: digfactFactuurBugTasks }
            ];

            var digfactChanges =
            [
                { changeid: 9, changename: "toch pdf versie", changetasks: digfactChangeTasks }
            ];
            
            var viewModel = new PBI(1, 68075, "Digitaal factureren", digfactTasks, digfactBugs, digfactChanges);
            ko.applyBindings(viewModel);
        </script>
</body>
</html>
